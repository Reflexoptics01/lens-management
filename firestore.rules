rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isSuperAdmin() {
      return request.auth != null && 
             (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) ||
              exists(/databases/$(database)/documents/admins/$(request.auth.email)));
    }

    function isTeamMember(userId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(userId)/teamMembers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(userId)/teamMembers/$(request.auth.uid)).data.isActive == true;
    }

    function canAccessUserData(userId) {
      return isOwner(userId) || isTeamMember(userId) || isSuperAdmin();
    }

    function canAccessUserDataFromMobile(userId) {
      return (isOwner(userId) || isTeamMember(userId)) && hasMobileAppAccess(userId) || isSuperAdmin();
    }

    function hasMobileAppAccess(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.mobileAppAccess == true;
    }

    // Admin configuration - secured collection
    match /admins/{adminId} {
      allow read, write: if false; // Only accessible via server-side code
    }

    // Global collections - secured rules
    match /userRegistrations/{document} {
      // Super admin can read/write everything
      allow read, write: if isSuperAdmin();
      
      // Allow any authenticated user to create a registration
      allow create: if isAuthenticated();
      
      // Allow users to read their own registration status
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.uid;
    }

    match /users/{userId} {
      // Super admin can read/write everything
      allow read, write: if isSuperAdmin();
      
      // Users can read their own document (document ID should match their UID)
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow users to create their own document if it doesn't exist (for recovery scenarios)
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }

    match /globalSettings/{document} {
      allow read, write: if isSuperAdmin();
    }

    // User-specific data collections
    match /users/{userId}/settings/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/customers/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/orders/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/sales/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/purchases/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/salesReturns/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/purchaseReturns/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/transactions/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/lensInventory/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/dispatchLogs/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/counters/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/vendors/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/products/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/inventory/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/payments/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/invoices/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/categories/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/brands/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/prescriptions/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/appointments/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    match /users/{userId}/reports/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    // Marketplace profile - user-specific
    match /users/{userId}/marketplaceProfile/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    // Team members collection - owner can manage, team members can read their own data
    match /users/{userId}/teamMembers/{memberId} {
      allow read: if canAccessUserData(userId) || request.auth.uid == memberId;
      allow write: if isOwner(userId) || isSuperAdmin();
    }

    // Shop sharing collections (if implemented)
    match /shop/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Read-only for now
    }

    // Marketplace collections - global access for authenticated users
    match /marketplaceQueries/{queryId} {
      // All authenticated users can read marketplace queries
      allow read: if isAuthenticated();
      
      // Only authenticated users can create queries
      allow create: if isAuthenticated();
      
      // Only query poster or super admin can update/delete
      allow update, delete: if isAuthenticated() && 
        (resource.data.posterInfo.userId == request.auth.uid || isSuperAdmin());
    }

    // Query responses subcollection
    match /marketplaceQueries/{queryId}/responses/{responseId} {
      // All authenticated users can read responses
      allow read: if isAuthenticated();
      
      // Only authenticated users can create responses
      allow create: if isAuthenticated();
      
      // Only response author or super admin can update/delete
      allow update, delete: if isAuthenticated() && 
        (resource.data.responderInfo.userId == request.auth.uid || isSuperAdmin());
    }

    // Backup collections - only owner can access
    match /users/{userId}/backups/{document} {
      allow read, write: if isOwner(userId) || isSuperAdmin();
    }

    // Mobile app specific collections (if needed in future)
    // Note: For additional security, you can change user data rules to use 
    // canAccessUserDataFromMobile() instead of canAccessUserData() to enforce
    // mobile app approval for all mobile access
    match /users/{userId}/mobileAppData/{document} {
      allow read, write: if isOwner(userId) && hasMobileAppAccess(userId);
    }

    // Marketplace notifications - user-specific
    match /users/{userId}/marketplaceNotifications/{document} {
      allow read, write: if canAccessUserData(userId);
    }

    // Chat system - global collection for authenticated users
    match /chats/{chatId} {
      // Users can read chats they are participants in
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participants;
      
      // Users can create chats they are participants in
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participants;
      
      // Users can update chats they are participants in (for last message updates)
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants;
      
      // Participants can delete chats they are part of, or super admin can delete any
      allow delete: if isAuthenticated() && 
                       (request.auth.uid in resource.data.participants || isSuperAdmin());
      
      // Chat messages subcollection
      match /messages/{messageId} {
        // Users can read messages from chats they participate in
        allow read: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Users can create messages in chats they participate in
        allow create: if isAuthenticated() && 
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Allow participants to update messages for read receipts (readBy field)
        // or message sender/super admin for other updates
        allow update: if isAuthenticated() && 
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants ||
           request.auth.uid == resource.data.sender || 
           isSuperAdmin());
           
        // Chat participants, message sender, or super admin can delete messages
        allow delete: if isAuthenticated() && 
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants ||
           request.auth.uid == resource.data.sender || 
           isSuperAdmin());
      }
    }

    // Error logs - restricted access
    match /errorLogs/{document} {
      allow read, write: if isSuperAdmin();
      // Allow users to create error logs for their own sessions
      allow create: if isAuthenticated();
    }

    // Performance logs - restricted access
    match /performanceLogs/{document} {
      allow read, write: if isSuperAdmin();
      // Allow users to create performance logs for their own sessions
      allow create: if isAuthenticated();
    }

    // Critical alerts - admin only
    match /criticalAlerts/{document} {
      allow read, write: if isSuperAdmin();
    }

    // Health checks - system monitoring
    match /healthChecks/{document} {
      allow read, write: if isSuperAdmin();
      // Allow system to create health check records
      allow create: if isAuthenticated();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 